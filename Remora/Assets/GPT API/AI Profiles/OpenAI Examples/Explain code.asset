%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 8365ebd05613b314bab2f28edd94f85b, type: 3}
  m_Name: Explain code
  m_EditorClassIdentifier: 
  profileNotes: Explain a complicated piece of code.
  model: code-davinci-002
  maxTokens: 64
  temperature: 0
  topP: 1
  frequencyPenalty: 0
  presencePenalty: 0
  bestOf: 1
  stopSequences:
  - '"""'
  initialPrompt: "class Log:\n    def __init__(self, path):\n        dirname = os.path.dirname(path)\n       
    os.makedirs(dirname, exist_ok=True)\n        f = open(path, \"a+\")\n\n       
    # Check that the file is newline-terminated\n        size = os.path.getsize(path)\n       
    if size > 0:\n            f.seek(size - 1)\n            end = f.read(1)\n           
    if end != \"\\n\":\n                f.write(\"\\n\")\n        self.f = f\n       
    self.path = path\n\n    def log(self, event):\n        event[\"_event_id\"] =
    str(uuid.uuid4())\n        json.dump(event, self.f)\n        self.f.write(\"\\n\")\n\n   
    def state(self):\n        state = {\"complete\": set(), \"last\": None}\n       
    for line in open(self.path):\n            event = json.loads(line)\n           
    if event[\"type\"] == \"submit\" and event[\"success\"]:\n                state[\"complete\"].add(event[\"id\"])\n               
    state[\"last\"] = event\n        return state\n\n\"\"\"\nHere's what the above
    class is doing:\n1."
  jsonDataToParse: "{\r\n  \"model\": \"code-davinci-002\",\r\n  \"prompt\": \"class
    Log:\\n    def __init__(self, path):\\n        dirname = os.path.dirname(path)\\n       
    os.makedirs(dirname, exist_ok=True)\\n        f = open(path, \\\"a+\\\")\\n\\n       
    # Check that the file is newline-terminated\\n        size = os.path.getsize(path)\\n       
    if size > 0:\\n            f.seek(size - 1)\\n            end = f.read(1)\\n           
    if end != \\\"\\\\n\\\":\\n                f.write(\\\"\\\\n\\\")\\n        self.f
    = f\\n        self.path = path\\n\\n    def log(self, event):\\n        event[\\\"_event_id\\\"]
    = str(uuid.uuid4())\\n        json.dump(event, self.f)\\n        self.f.write(\\\"\\\\n\\\")\\n\\n   
    def state(self):\\n        state = {\\\"complete\\\": set(), \\\"last\\\": None}\\n       
    for line in open(self.path):\\n            event = json.loads(line)\\n           
    if event[\\\"type\\\"] == \\\"submit\\\" and event[\\\"success\\\"]:\\n               
    state[\\\"complete\\\"].add(event[\\\"id\\\"])\\n                state[\\\"last\\\"]
    = event\\n        return state\\n\\n\\\"\\\"\\\"\\nHere's what the above class
    is doing:\\n1.\",\r\n  \"temperature\": 0,\r\n  \"max_tokens\": 64,\r\n  \"top_p\":
    1.0,\r\n  \"frequency_penalty\": 0.0,\r\n  \"presence_penalty\": 0.0,\r\n  \"stop\":
    [\"\\\"\\\"\\\"\"]\r\n}"
